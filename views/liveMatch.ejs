<%- include('partials/header') %>
<div class="d-flex justify-content-center mb-3">
  <a href="/" class="btn btn-primary">üè† Back to Home</a>
</div>

<div class="page-center">
  <div class="container">
    <div class="card shadow p-4" style="max-width: 800px; margin: 0 auto">
      <h2 class="text-center mb-4">‚öΩ Live Match Tracker</h2>

      <% if (messages.success) { %>
      <div class="alert alert-success text-center">
        <%= messages.success[0] %>
      </div>
      <% } %> <% if (messages.error) { %>
      <div class="alert alert-danger text-center"><%= messages.error[0] %></div>
      <% } %>

      <form
        method="POST"
        action="/admin/live-match/end"
        onsubmit="prepareFormData()"
      >
        <!-- Live Scoreboard -->
        <div
          class="d-grid text-center mb-3"
          style="grid-template-columns: 1fr auto 1fr"
        >
          <div>
            <h5 class="fw-bold m-0" id="displayHomeTeam">Home</h5>
          </div>
          <div>
            <span class="fs-4 fw-bold" id="liveScore">0 - 0</span>
          </div>
          <div>
            <h5 class="fw-bold m-0" id="displayAwayTeam">Opponent</h5>
          </div>
        </div>

        <!-- Match Type -->
        <div class="mb-3 d-flex flex-column align-items-center gap-2">
          <button
            type="button"
            class="btn btn-outline-primary match-type-btn w-75"
            data-type="League"
            onclick="selectMatchType('League')"
          >
            üèÜ League
          </button>
          <button
            type="button"
            class="btn btn-outline-success match-type-btn w-75"
            data-type="Cup"
            onclick="selectMatchType('Cup')"
          >
            ü•á Cup
          </button>
          <button
            type="button"
            class="btn btn-outline-warning match-type-btn w-75"
            data-type="Friendly"
            onclick="selectMatchType('Friendly')"
          >
            ü§ù Friendly
          </button>
        </div>

        <!-- Assign Team -->
        <div id="assignTeamSection" class="mb-4 text-center">
          <button
            type="button"
            class="btn btn-outline-primary me-2"
            onclick="assignTeam('home')"
          >
            üè† Home
          </button>
          <button
            type="button"
            class="btn btn-outline-primary"
            onclick="assignTeam('away')"
          >
            üöå Away
          </button>
        </div>

        <!-- Team Inputs -->
        <div
          id="teamInputsWrapper"
          class="mb-4 d-flex justify-content-between gap-3 text-center"
        >
          <div class="flex-fill text-center">
            <label
              for="homeTeam"
              class="form-label text-white d-block text-center"
              >üè† Home Team</label
            >
            <input
              type="text"
              class="form-control text-center"
              id="homeTeam"
              name="homeTeam"
              placeholder="e.g. My Team"
              required
            />
          </div>
          <div class="flex-fill text-center">
            <label
              for="awayTeam"
              class="form-label text-white d-block text-center"
              >üöå Away Team</label
            >
            <input
              type="text"
              class="form-control text-center"
              id="awayTeam"
              name="awayTeam"
              placeholder="e.g. Opponent"
              required
            />
          </div>
        </div>

        <hr />
        <div class="d-flex flex-column align-items-center mb-3">
          <h5 class="mb-2">‚è± Match Events</h5>
          <button
            type="button"
            class="btn btn-warning btn-sm"
            onclick="toggleHalf()"
          >
            ‚è± (<span id="halfIndicator">First Half</span>)
          </button>
        </div>

        <!-- Scorers -->
        <div class="d-flex gap-2 mb-3">
          <select id="scorerName" class="form-select">
            <option value="">Scorer</option>
            <% players.forEach(player => { %>
            <option value="<%= player.firstName %> <%= player.lastName %>">
              <%= player.firstName %> <%= player.lastName %>
            </option>
            <% }) %>
          </select>

          <select id="assistName" class="form-select">
            <option value="">No Assist</option>
            <% players.forEach(player => { %>
            <option value="<%= player.firstName %> <%= player.lastName %>">
              <%= player.firstName %> <%= player.lastName %>
            </option>
            <% }) %>
          </select>

          <button type="button" class="btn btn-success" onclick="addScorer()">
            Add Goal
          </button>
        </div>

        <div class="text-center mb-3">
          <button
            type="button"
            class="btn btn-danger btn-sm"
            onclick="addOppositionGoal()"
          >
            ‚ûï Add Goal for Opposition
          </button>
        </div>

        <ul id="scorerList" class="list-group mb-4"></ul>

        <!-- Cards -->
        <h5>üü® Yellow Card</h5>
        <div class="d-flex gap-2 mb-3">
          <select id="yellowCardPlayer" class="form-select">
            <option value="">Select Player</option>
            <% players.forEach(player => { %>
            <option value="<%= player.firstName %> <%= player.lastName %>">
              <%= player.firstName %> <%= player.lastName %>
            </option>
            <% }) %>
          </select>
          <button
            type="button"
            class="btn btn-warning"
            onclick="addYellowCard()"
          >
            Add
          </button>
        </div>
        <ul id="yellowCardList" class="list-group mb-3"></ul>

        <h5>üü• Red Card</h5>
        <div class="d-flex gap-2 mb-3">
          <select id="redCardPlayer" class="form-select">
            <option value="">Select Player</option>
            <% players.forEach(player => { %>
            <option value="<%= player.firstName %> <%= player.lastName %>">
              <%= player.firstName %> <%= player.lastName %>
            </option>
            <% }) %>
          </select>
          <button type="button" class="btn btn-danger" onclick="addRedCard()">
            Add
          </button>
        </div>
        <ul id="redCardList" class="list-group mb-4"></ul>

        <!-- Hidden Inputs -->
        <input type="hidden" id="homeScore" name="homeScore" value="0" />
        <input type="hidden" id="awayScore" name="awayScore" value="0" />
        <input
          type="hidden"
          name="firstHalfScorers"
          id="firstHalfScorersInput"
        />
        <input
          type="hidden"
          name="secondHalfScorers"
          id="secondHalfScorersInput"
        />
        <input type="hidden" name="yellowCards" id="yellowCardsInput" />
        <input type="hidden" name="redCards" id="redCardsInput" />
        <input type="hidden" name="matchType" id="matchType" />

        <div class="mb-3">
          <label for="motmOpposition" class="form-label"
            >üéñ Opposition MOTM</label
          >
          <select name="motmOpposition" id="motmOpposition" class="form-select">
            <option value="">Select Player</option>
            <% players.forEach(player => { %>
            <option value="<%= player.firstName %> <%= player.lastName %>">
              <%= player.firstName %> <%= player.lastName %>
            </option>
            <% }) %>
          </select>
        </div>

        <button type="submit" class="btn btn-primary w-100">
          ‚úÖ End Match & Save
        </button>
      </form>
    </div>
  </div>
</div>

<script>
  const firstHalfScorers = [];
  const secondHalfScorers = [];
  const yellowCards = [];
  const redCards = [];
  let isSecondHalf = false;
  let inputsHidden = false;

  function assignTeam(position) {
    const assignSection = document.getElementById('assignTeamSection');
    const homeInput = document.getElementById('homeTeam');
    const awayInput = document.getElementById('awayTeam');

    if (position === 'home') {
      homeInput.value = 'My Team';
      homeInput.readOnly = true;
      awayInput.value = '';
      awayInput.readOnly = false;
    } else {
      awayInput.value = 'My Team';
      awayInput.readOnly = true;
      homeInput.value = '';
      homeInput.readOnly = false;
    }

    assignSection.style.display = 'none';
    updateLiveScoreboard();
    checkAndHideInputs();
  }

  function renderScorers() {
    const list = document.getElementById('scorerList');
    list.innerHTML = '';
    const scorers = isSecondHalf ? secondHalfScorers : firstHalfScorers;
    scorers.forEach((s, i) => {
      const li = document.createElement('li');
      li.className =
        'list-group-item d-flex justify-content-between align-items-center';
      li.innerHTML = `${s.name} ${
        s.assist ? '(Assisted by ' + s.assist + ')' : ''
      } <button class="btn btn-sm btn-danger" onclick="removeScorer(${i})">‚ùå</button>`;
      list.appendChild(li);
    });

    document.getElementById('firstHalfScorersInput').value =
      JSON.stringify(firstHalfScorers);
    document.getElementById('secondHalfScorersInput').value =
      JSON.stringify(secondHalfScorers);
  }

  function addScorer() {
    const name = document.getElementById('scorerName').value;
    const assist = document.getElementById('assistName').value;
    if (!name) return;
    const scorer = { name };
    if (assist) scorer.assist = assist;

    const home = document.getElementById('homeTeam').value;
    const away = document.getElementById('awayTeam').value;

    if (home === 'My Team') {
      document.getElementById('homeScore').value =
        parseInt(document.getElementById('homeScore').value || '0') + 1;
    } else if (away === 'My Team') {
      document.getElementById('awayScore').value =
        parseInt(document.getElementById('awayScore').value || '0') + 1;
    }

    if (isSecondHalf) {
      secondHalfScorers.push(scorer);
    } else {
      firstHalfScorers.push(scorer);
    }

    renderScorers();
    updateLiveScoreboard();
    document.getElementById('scorerName').value = '';
    document.getElementById('assistName').value = '';
  }

  function removeScorer(index) {
    const target = isSecondHalf ? secondHalfScorers : firstHalfScorers;
    target.splice(index, 1);
    renderScorers();
  }

  function addOppositionGoal() {
    const home = document.getElementById('homeTeam').value;
    const away = document.getElementById('awayTeam').value;

    if (home !== 'My Team') {
      document.getElementById('homeScore').value =
        parseInt(document.getElementById('homeScore').value || '0') + 1;
    } else if (away !== 'My Team') {
      document.getElementById('awayScore').value =
        parseInt(document.getElementById('awayScore').value || '0') + 1;
    }

    updateLiveScoreboard();
  }

  function addYellowCard() {
    const name = document.getElementById('yellowCardPlayer').value;
    if (!name) return;
    yellowCards.push({ name });
    renderCardList('yellowCardList', yellowCards, 'yellowCardsInput');
    document.getElementById('yellowCardPlayer').value = '';
  }

  function addRedCard() {
    const name = document.getElementById('redCardPlayer').value;
    if (!name) return;
    redCards.push({ name });
    renderCardList('redCardList', redCards, 'redCardsInput');
    document.getElementById('redCardPlayer').value = '';
  }

  function renderCardList(listId, data, inputId) {
    const ul = document.getElementById(listId);
    ul.innerHTML = '';
    data.forEach((card, i) => {
      const li = document.createElement('li');
      li.className =
        'list-group-item d-flex justify-content-between align-items-center';
      li.innerHTML = `${card.name} <button class="btn btn-sm btn-outline-danger" onclick="removeCard('${listId}', ${i})">‚ùå</button>`;
      ul.appendChild(li);
    });
    document.getElementById(inputId).value = JSON.stringify(data);
  }

  function removeCard(listId, index) {
    if (listId === 'yellowCardList') {
      yellowCards.splice(index, 1);
      renderCardList('yellowCardList', yellowCards, 'yellowCardsInput');
    } else {
      redCards.splice(index, 1);
      renderCardList('redCardList', redCards, 'redCardsInput');
    }
  }

  function toggleHalf() {
    isSecondHalf = !isSecondHalf;
    document.getElementById('halfIndicator').textContent = isSecondHalf
      ? 'Second Half'
      : 'First Half';
    renderScorers();
  }

  function updateLiveScoreboard() {
    const home = document.getElementById('homeTeam').value || 'Home';
    const away = document.getElementById('awayTeam').value || 'Away';
    const homeScore = document.getElementById('homeScore').value || '0';
    const awayScore = document.getElementById('awayScore').value || '0';

    document.getElementById('displayHomeTeam').textContent = home;
    document.getElementById('displayAwayTeam').textContent = away;
    document.getElementById(
      'liveScore'
    ).textContent = `${homeScore} - ${awayScore}`;
  }

  function checkAndHideInputs() {
    const home = document.getElementById('homeTeam').value.trim();
    const away = document.getElementById('awayTeam').value.trim();
    const wrapper = document.getElementById('teamInputsWrapper');

    if (inputsHidden) return; // ‚úÖ Prevent double-hide

    if (home && away) {
      wrapper.style.setProperty('display', 'none', 'important');
      inputsHidden = true;
      console.log('‚úÖ Inputs filled and hidden.');
    }
  }

  function selectMatchType(type) {
    document.getElementById('matchType').value = type;
    document.querySelectorAll('.match-type-btn').forEach((btn) => {
      if (btn.dataset.type === type) {
        btn.classList.add('btn-dark');
        btn.disabled = true;
      } else {
        btn.style.display = 'none';
      }
    });
  }

  function prepareFormData() {
    document.getElementById('firstHalfScorersInput').value =
      JSON.stringify(firstHalfScorers);
    document.getElementById('secondHalfScorersInput').value =
      JSON.stringify(secondHalfScorers);
    document.getElementById('yellowCardsInput').value =
      JSON.stringify(yellowCards);
    document.getElementById('redCardsInput').value = JSON.stringify(redCards);
  }

  document.addEventListener('DOMContentLoaded', () => {
    updateLiveScoreboard();

    document.getElementById('scorerName').addEventListener('change', () => {
      const scorer = document.getElementById('scorerName').value;
      const assist = document.getElementById('assistName');
      assist.querySelectorAll('option').forEach((opt) => {
        opt.style.display = opt.value === scorer ? 'none' : '';
      });
    });

    // üëá Unified click handler to check for team assignment completion
    document.addEventListener('click', (e) => {
      const clickedInsideInputs =
        e.target.closest('#teamInputsWrapper') ||
        e.target.id === 'homeTeam' ||
        e.target.id === 'awayTeam';

      if (!clickedInsideInputs) {
        checkAndHideInputs(); // ‚úÖ Checks and hides only once
      }
    });
  });
</script>

<%- include('partials/footer') %>
